import time
import adi
import numpy as np
import pandas as pd
from pathlib import Path
from scipy import signal
from time import sleep

# Import Plotly
import plotly.graph_objects as go

filename = "test.csv"
outfile = "dummy.csv"
filename_with_path = Path(__file__).with_name(filename)

print("analyzing file: ", filename)

dataframe = pd.read_csv(filename_with_path, header=None)
datai = np.array(dataframe[0].tolist())
dataq = np.array(dataframe[1].tolist())

# Create radio
sdr = adi.Pluto(uri="ip:pluto.local")
# Configure properties
# sdr.rx_rf_bandwidth = 4000000 # Note that loading a filter overrides this
sdr.filter = "LTE20_MHz.ftr"  # Handy filter for fairly widdeband measurements

# Original parameters
'''
sdr.rx_lo = 2000000000
sdr.tx_lo = 2000000000
tx_tone_freq = 3000000
'''
# 4/4/2024 parameters
sdr.rx_lo = 2000000000
sdr.tx_lo = 2005000000
tx_tone_freq = 2000000

sdr.tx_cyclic_buffer = True
sdr.tx_hardwaregain_chan0 = -30


sdr.gain_control_mode_chan0 = "slow_attack"

# sdr.gain_control_mode_chan0 = "manual"  # DISable AGC
# sdr.rx_hardwaregain_chan0 = 55

# Read properties
print("RX LO %s" % (sdr.rx_lo))


phy = sdr.ctx.find_device("ad9361-phy")
# Read product ID register
pi = phy.reg_read(0x37)
print(f"ID: {hex(pi)}")

disable_qec_cal = True

if disable_qec_cal:
    print("Disabling Rx QEC tracking cal...")
    phy.reg_write(0x169, (phy.reg_read(0x169) & 0b11111110))
    phy.reg_write(0x182, phy.reg_read(0x182) | 0b00010001)
    phy.reg_write(0x170, 0)
    phy.reg_write(0x171, 0)
    phy.reg_write(0x179, 0)
    phy.reg_write(0x17A, 0)
    print("Done disabling.")

# Create a sinewave waveform
fs = int(sdr.sample_rate)
N = 1024
fc = int(tx_tone_freq / (fs / N)) * (fs / N)
ts = 1 / float(fs)
t = np.arange(0, N * ts, ts)
i = np.cos(2 * np.pi * t * fc) * 2 ** 14
q = np.sin(2 * np.pi * t * fc) * 2 ** 14
iq = (datai * 2 ** 14) + 1j * (dataq * 2 ** 14)

sdr.tx(iq)
sdr.rx_buffer_size = 2**16
sleep(1.0)
print("rx_hardware gain after settling (which you may have set yourself if you disabled AGC): ", sdr.tx_hardwaregain_chan0)

# Collect data
# Initialize lists for accumulating data
frequencies = []
psds = []

for r in range(10):
    x = sdr.rx()
    xi = np.real(x)
    xq = np.imag(x)
    print("Maximum i, q codes: ", np.max(np.abs(xi)), ", ", np.max(np.abs(xq)))
    f, Pxx_den = signal.periodogram(x, fs, window='blackman')
    
    # Accumulate data
    frequencies.extend(f)
    psds.extend(Pxx_den)
    time.sleep(0.1)

# Plot all data in a single plot using Plotly
fig = go.Figure(data=go.Scatter(x=frequencies, y=psds))
fig.update_layout(title="Power Spectral Density Across All Iterations", xaxis_title="Frequency [Hz]", yaxis_title="PSD [V**2/Hz]", yaxis_type="log")
fig.show()

outframe = pd.DataFrame()
outframe[0] = xi
outframe[1] = xq

outframe.to_csv(outfile, index=False)

del sdr  # Clean up.
